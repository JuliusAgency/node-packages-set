{
	"info": {
		"_postman_id": "afa5261a-3cff-42bd-83a4-a735a66d8936",
		"name": "Test Sanity jwt",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30004978"
	},
	"item": [
		{
			"name": "ping",
			"item": [
				{
					"name": "hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user1\",\n    \"email\": \"user1@gmail.com\",\n    \"password\": \"111111\",\n    \"role\": \"user\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login-with-empty-users-db",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var token = jsonData.token;",
									"",
									"pm.environment.set(\"xjwttoken\", token);",
									"",
									"",
									"pm.test(\"User not found, code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"",
									"",
									"    pm.test(\"User not found\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.eql(\"User not found.\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"email\": \"{{email}}\",\n//     \"password\": \"{{password}}\"\n// }\n\n{\n    \"email\": \"user1@gmail.com\",\n    \"password\": \"111111\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}/login",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"User unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Failed to decode or validate authorization token. Reason: invalid-token.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{examp_url}}/first",
							"host": [
								"{{examp_url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "register",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"// });",
									"",
									"// pm.test(\"User already exist\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     pm.expect(jsonData.message).not.to.eql(\"User already exist\");",
									"// });",
									"",
									"pm.test(\"register\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    // if (responseJson._id != undefined) {",
									"    //     pm.expect(responseJson._id).to.have.lengthOf(36);",
									"    // };",
									"    if (responseJson.message != undefined && ",
									"        responseJson.message === \"User already exist\") {",
									"        pm.expect.fail(\"User already exists\");",
									"    };",
									"});",
									"",
									"pm.test(\"user name from request and response MATCH\", () => {",
									"    const responseInJson = pm.response.json();",
									"    const user_name = responseInJson.name;",
									"    const myRequest = JSON.parse(pm.request.body.raw);",
									"    const user_name_request = myRequest.name;",
									"    pm.expect(user_name).to.eql(user_name_request);    ",
									"    if (user_name != user_name_request){",
									"        pm.expect.fail(\"user name from request and response DONT MATCH\");",
									"    };",
									"});",
									"",
									"pm.test(\"user email from request and response MATCH\", () => {",
									"    const responseInJson = pm.response.json();",
									"    const user_email = responseInJson.email;",
									"    const myRequest = JSON.parse(pm.request.body.raw);",
									"    const user_email_request = myRequest.email;",
									"    pm.expect(user_email).to.eql(user_email_request);    ",
									"    if (user_email != user_email_request){",
									"        pm.expect.fail(\"user email from request and response DONT MATCH\");",
									"    };",
									"});",
									"",
									"//     const responseInJson = pm.response.json();",
									"//     const user_name = responseInJson.name;",
									"//     console.log(user_name);",
									"// // console.log(JSON.stringify(user_name));",
									"",
									"//     const myRequest = JSON.parse(pm.request.body.raw);",
									"//     const user_name_request = myRequest.name;",
									"// // console.log(JSON.stringify(user_name_request));",
									"//     console.log(user_name_request);",
									"",
									"",
									"// // const myRequest = pm.request.toJSON().body.raw;",
									"// // const user_name_request = myRequest.name;",
									"// // console.log(myRequest.name);",
									"",
									"",
									"// // if (user_name_request === JSON.stringify(user_name)){",
									" ",
									"//     if (user_name_request === user_name){",
									"",
									"//     console.log(\"Request and Response MATCH\");",
									"// }",
									"//     else{",
									"//     console.log(\"Request and Response DONT MATCH\");",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"name\": \"{{name}}\",\n//     \"email\": \"{{email}}\",\n//     \"password\": \"{{password}}\",\n//     \"role\": \"{{role}}\"\n// }\n\n{\n    \"name\": \"admin\",\n    \"email\": \"admin1@gmail.com\",\n    \"password\": \"111111\",\n    \"role\": \"admin\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user-mngr/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-mngr",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// pm.test(\"User unauthorized\", function () {",
									"//     pm.response.to.have.body(\"Unauthorized\");",
									"// });",
									"",
									"pm.test(\"User unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Failed to decode or validate authorization token. Reason: invalid-token.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{examp_url}}/first",
							"host": [
								"{{examp_url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login-non-existent-user",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var token = jsonData.token;",
									"",
									"pm.environment.set(\"xjwttoken\", token);",
									"",
									"",
									"",
									"",
									"pm.test(\"User not found, code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"",
									"    pm.test(\"User not found\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.eql(\"User not found.\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"email\": \"user{{$randomInt}}@gmail.com\",\n//     \"password\": \"{{password}}\"\n// }\n\n{\n    \"email\": \"user{{$randomInt}}@gmail.com\",\n    \"password\": \"111111\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}/login",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"User unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Failed to decode or validate authorization token. Reason: invalid-token.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{examp_url}}/first",
							"host": [
								"{{examp_url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login-with-wrong-password",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var token = jsonData.token;",
									"",
									"pm.environment.set(\"xjwttoken\", token);",
									"",
									"",
									"",
									"",
									"pm.test(\"User or password incorrect, code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"",
									"    pm.test(\"User or password incorrect\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.eql(\"User or password incorrect\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"email\": \"{{email}}\",\n//     \"password\": \"{{$randomInt}}\"\n// }\n\n{\n    \"email\": \"admin1@gmail.com\",\n    \"password\": \"{{$randomInt}}\"\n}\n\n// {\n//     \"email\": \"guest1@gmail.com\",\n//     \"password\": \"{{$randomInt}}\"\n// }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}/login",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"User unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Failed to decode or validate authorization token. Reason: invalid-token.\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{examp_url}}/first",
							"host": [
								"{{examp_url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var token = jsonData.token;",
									"",
									"pm.environment.set(\"xjwttoken\", token);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// var responseInJson = pm.response.json();",
									"",
									"// pm.collectionVariables.set(\"token\", responseInJson.token);",
									"",
									"// //console.log(\"token: \" + pm.collectionVariables.get(\"token\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"email\": \"{{email}}\",\n//     \"password\": \"{{password}}\"\n// }\n\n{\n    \"email\": \"admin1@gmail.com\",\n    \"password\": \"111111\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}/login",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User authorized\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"You have reached the first protected route\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{examp_url}}/first",
							"host": [
								"{{examp_url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "change-password",
			"item": [
				{
					"name": "change-password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"email\": \"{{email}}\",\n//     \"password\": \"{{password}}\",\n//     \"passwordNew\":\"{{passwordNew}}\"\n// }\n\n{\n    \"email\": \"admin1@gmail.com\",\n    \"password\": \"111111\",\n    \"passwordNew\":\"222222\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user-mngr/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-mngr",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"User unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Required X-JWT-Token header not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{examp_url}}/first",
							"host": [
								"{{examp_url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login-with-old-password",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var token = jsonData.token;",
									"",
									"pm.environment.set(\"xjwttoken\", token);",
									"",
									"pm.test(\"Login with old password\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"User or password incorrect\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User or password incorrect\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"email\": \"{{email}}\",\n//     \"password\": \"{{password}}\"\n// }\n\n{\n    \"email\": \"admin1@gmail.com\",\n    \"password\": \"111111\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}/login",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"User unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Required X-JWT-Token header not found.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{examp_url}}/first",
							"host": [
								"{{examp_url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login-with-new-password",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var token = jsonData.token;",
									"",
									"pm.environment.set(\"xjwttoken\", token);",
									"",
									"pm.test(\"Login with new password\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"email\": \"{{email}}\",\n//     \"password\": \"{{passwordNew}}\"\n// }\n\n{\n    \"email\": \"admin1@gmail.com\",\n    \"password\": \"222222\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}/login",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User authorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"You have reached the first protected route\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-JWT-Token",
								"value": "{{xjwttoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{examp_url}}/first",
							"host": [
								"{{examp_url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}