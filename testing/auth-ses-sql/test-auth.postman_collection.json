{
	"info": {
		"_postman_id": "6c88dfd5-7545-4c03-bc72-be138d3de521",
		"name": "Test Auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30004978"
	},
	"item": [
		{
			"name": "register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"register\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(pm.response.code).to.eql(200);",
							"    // if (responseJson._id != undefined) {",
							"    //     pm.expect(responseJson._id).to.have.lengthOf(36);",
							"    // };",
							"    if (responseJson.message != undefined && ",
							"        responseJson.message === \"User already exist\") {",
							"        pm.expect.fail(\"User already exists\");",
							"    };",
							"});",
							"",
							"pm.test(\"user name from request and response MATCH\", () => {",
							"    const responseInJson = pm.response.json();",
							"    const user_name = responseInJson.name;",
							"    const myRequest = JSON.parse(pm.request.body.raw);",
							"    const user_name_request = myRequest.name;",
							"    pm.expect(user_name).to.eql(user_name_request);    ",
							"    if (user_name != user_name_request){",
							"        pm.expect.fail(\"user name from request and response DONT MATCH\");",
							"    };",
							"});",
							"",
							"pm.test(\"user email from request and response MATCH\", () => {",
							"    const responseInJson = pm.response.json();",
							"    const user_email = responseInJson.email;",
							"    const myRequest = JSON.parse(pm.request.body.raw);",
							"    const user_email_request = myRequest.email;",
							"    pm.expect(user_email).to.eql(user_email_request);    ",
							"    if (user_email != user_email_request){",
							"        pm.expect.fail(\"user email from request and response DONT MATCH\");",
							"    };",
							"});",
							"",
							"pm.test(\"auth role from request and response MATCH\", () => {",
							"    const responseInJson = pm.response.json();",
							"    const auth_role = responseInJson.role;",
							"    const myRequest = JSON.parse(pm.request.body.raw);",
							"    const auth_role_request = myRequest.role;",
							"    pm.expect(auth_role).to.eql(auth_role_request);    ",
							"    if (auth_role != auth_role_request){",
							"        pm.expect.fail(\"auth role from request and response DONT MATCH\");",
							"    };",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"role\": \"{{role}}\"\n}\n\n//  {\n//     \"name\": \"user1\",\n//     \"email\": \"user1@gmail.com\",\n//     \"password\": \"111111\",\n//     \"role\": \"user\"\n// }\n\n// {\n//     \"name\": \"admin1\",\n//     \"email\": \"admin1@gmail.com\",\n//     \"password\": \"111111\",\n//     \"role\": \"admin\"\n// }\n\n// {\n//     \"name\": \"guest1\",\n//     \"email\": \"guest1@gmail.com\",\n//     \"password\": \"111111\",\n//     \"role\": \"guest\"\n// }\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user-mngr/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user-mngr",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseInJson = pm.response.json();",
							"",
							"pm.collectionVariables.set(\"role\", responseInJson.role);",
							"",
							"// console.log(\"role: \" + pm.collectionVariables.get(\"role\"));",
							"",
							"pm.test(\"Auth_role MATCH with role from previous request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.role).to.eql(pm.collectionVariables.get(\"role\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}\n\n// {\n//     \"email\": \"user1@gmail.com\",\n//     \"password\": \"111111\"\n// }\n\n// {\n//     \"email\": \"admin1@gmail.com\",\n//     \"password\": \"111111\"\n// }\n\n// {\n//     \"email\": \"guest1@gmail.com\",\n//     \"password\": \"111111\"\n// }\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth_url}}/login",
					"host": [
						"{{auth_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User authorized\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"You have reached the first protected route\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{examp_url}}/first",
					"host": [
						"{{examp_url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "rbac/acl",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// for user and admin code 200 + message \"You are authorized to access this resource\"",
							"",
							"// for guest code 403 + message \"Forbidden\"",
							"",
							"//Check access",
							"",
							"console.log(\"role: \" + pm.collectionVariables.get(\"role\"));",
							"",
							"",
							"pm.test(\"user role and permissions MATCH\" , () => {",
							"    const role = pm.collectionVariables.get(\"role\");",
							"    pm.expect(role).to.be.oneOf([\"user\", \"admin\", \"guest\"]);",
							"    pm.expect (pm.response.code).to.be.oneOf([200, 401, 403]); ",
							"",
							"    if (pm.response.code === 401) {",
							"        // console.log(pm.response)",
							"        // pm.response.to.have.status(\"Unauthorized\");",
							"        pm.expect.fail(\"a user has to login\")",
							"        return;",
							"    }",
							"   ",
							"",
							"    if ((role === \"user\") || (role === \"admin\")) {",
							"        const responseInJson = pm.response.json();",
							"        const message = responseInJson.message;",
							"        pm.response.to.have.status(200);",
							"        (message === \"You are authorized to access this resource\");",
							"    }",
							"    if (role === \"guest\" ) {",
							"        pm.response.to.have.status(403);",
							"    }",
							" });",
							"",
							"  ",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{examp_url}}/{{rbac-acl}}",
					"host": [
						"{{examp_url}}"
					],
					"path": [
						"{{rbac-acl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.collectionVariables.role = \"xyz\";",
							"//  console.log (pm.collectionVariables.get(\"role\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{auth_url}}/logout",
					"host": [
						"{{auth_url}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "role",
			"value": ""
		},
		{
			"key": "auth_role",
			"value": ""
		}
	]
}